<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../Definitions.tt" #>
using Pmad.Geometry.Algorithms;

namespace Pmad.Geometry.Shapes
{
<#

	foreach(var def in definitions)
	{
	// <TPrimitive, TVector, TPolygon, TAlgorithms, TConvention>
#>
    public sealed class Polygon<#=def.Suffix#> : PolygonBase<<#=def.Primitive#>, <#=def.Struct#>, Polygon<#=def.Suffix#>, <#=def.Struct#>Algorithms, <#=def.Struct#>Convention>
    {
		public Polygon<#=def.Suffix#>(IReadOnlyList<<#=def.Struct#>> shell, IReadOnlyList<IReadOnlyList<<#=def.Struct#>>> holes)
            : this(new(), shell, holes)
        {
        }
		
		public Polygon<#=def.Suffix#>(<#=def.Struct#>Convention convention, IReadOnlyList<<#=def.Struct#>> shell, IReadOnlyList<IReadOnlyList<<#=def.Struct#>>> holes)
            : base(convention, shell, holes)
        {
        }

		public Polygon<#=def.Suffix#>(<#=def.Struct#>Convention convention, IReadOnlyList<<#=def.Struct#>> shell)
            : base(convention, shell, NoHoles)
        {
        }

		protected override Polygon<#=def.Suffix#> CreatePolygon(IReadOnlyList<<#=def.Struct#>> shell, IReadOnlyList<IReadOnlyList<<#=def.Struct#>>> holes)
		{
			return new (Convention, shell, holes);
		}

		protected override Polygon<#=def.Suffix#> This => this;
    }
<#
	}
#>
}
