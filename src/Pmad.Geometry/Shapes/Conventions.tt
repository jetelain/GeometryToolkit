<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../Definitions.tt" #>
<#@ output extension=".cs" #>
using Clipper2Lib;
using Pmad.Geometry.Algorithms;

namespace Pmad.Geometry.Shapes
{
<#
	foreach(var def in definitions)
	{

    //<TPrimitive, TVector, TPolygon, TAlgorithms, TConvention>
#>
    public sealed class <#=def.Struct#>Convention : Vector2ConventionBase<<#=def.Primitive#>, <#=def.Struct#>, Polygon<#=def.Suffix#>, <#=def.Struct#>Algorithms, <#=def.Struct#>Convention>
    {
<#
	if ( def.IsFP ) {
#>
        private readonly <#=def.Primitive#> scale;

        public <#=def.Struct#>Convention(<#=def.Primitive#> scale = 1000)
        {
            this.scale = scale;
        }

        public override <#=def.Struct#> FromClipper(Point64 value)
        {
            return new <#=def.Struct#>(value.X, value.Y) / scale;
        }

        public override Point64 ToClipper(<#=def.Struct#> value)
        {
            var scaled = value * scale;
            return new (scaled.X, scaled.Y);
        }
        
        public override double ScaleForClipper => scale;
<#
	} 
	else
	{
#>
        public override <#=def.Struct#> FromClipper(Point64 value)
        {
            return new ((<#=def.Primitive#>)value.X, (<#=def.Primitive#>)value.Y);
        }

        public override Point64 ToClipper(<#=def.Struct#> value)
        {
            return new (value.X, value.Y);
        }

        public override double ScaleForClipper => 1;
<#
	}
#>
		public override Polygon<#=def.Suffix#> CreatePolygon(IReadOnlyList<<#=def.Struct#>> shell, IReadOnlyList<IReadOnlyList<<#=def.Struct#>>> holes)
		{
			return new (this, shell, holes);
		}
		
		public override Polygon<#=def.Suffix#> CreatePolygon(IReadOnlyList<<#=def.Struct#>> shell)
		{
			return new (this, shell);
		}

        internal override IEnumerable<Polygon<#=def.Suffix#>> FromClipper(PolyPath64 polyTree64)
		{
			return Polygon<#=def.Suffix#>.FromClipper(this, polyTree64);
		}
    }
<#
	}
#>
}
