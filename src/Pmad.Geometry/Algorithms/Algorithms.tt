<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../Definitions.tt" #>
<#@ output extension=".cs" #>
using System.Numerics;
using System.Runtime.CompilerServices;
using Clipper2Lib;
using Pmad.Geometry.Collections;
using Pmad.Geometry.Shapes;

namespace Pmad.Geometry.Algorithms
{
    public static class AlgorithmsDispatcher
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PointInPolygonResult TestPointInPolygon<TVector>(this ReadOnlyArray<TVector> points, TVector pt)
            where TVector : struct, IVector<TVector>
        {
<# foreach(var def in definitions) { #>
            if (typeof(TVector) == typeof(<#=def.Struct#>))
            {
                return ((ReadOnlyArray<<#=def.Struct#>>)(object)points).TestPointInPolygon((<#=def.Struct#>)(object)pt);
            }
<# } #>
            ThrowHelper.ThrowNotSupportedException();
            return default;
        }

	    [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PointInPolygonResult TestPointInPolygon<TVector>(this IReadOnlyList<TVector> points, TVector pt)
            where TVector : struct, IVector<TVector>
        {
<# foreach(var def in definitions) { #>
            if (typeof(TVector) == typeof(<#=def.Struct#>))
            {
                return ((IReadOnlyList<<#=def.Struct#>>)(object)points).TestPointInPolygon((<#=def.Struct#>)(object)pt);
            }
<# } #>
            ThrowHelper.ThrowNotSupportedException();
            return default;
        }

	    [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PointInPolygonResult TestPointInPolygon<TVector>(this List<TVector> points, TVector pt)
            where TVector : struct, IVector<TVector>
        {
<# foreach(var def in definitions) { #>
            if (typeof(TVector) == typeof(<#=def.Struct#>))
            {
                return ((List<<#=def.Struct#>>)(object)points).TestPointInPolygon((<#=def.Struct#>)(object)pt);
            }
<# } #>
            ThrowHelper.ThrowNotSupportedException();
            return default;
        }

	}
}
