<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../Definitions.tt" #>
<#@ output extension=".cs" #>
/**********************************************************************************
* Author    :  Angus Johnson, Julien Etelain                                      *
* Copyright :  Angus Johnson 2010-2024, Julien Etelain 2024                       *
* Purpose   :  PointInPolygon for each supported vector type, to avoid conversion *
* License   :  http://www.boost.org/LICENSE_1_0.txt                               *
***********************************************************************************/
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Clipper2Lib;
using Pmad.Geometry.Collections;

namespace Pmad.Geometry.Algorithms
{
	public static class PointInPolygon
	{
<#
	foreach(var def in definitions)
	{
#>
        <#=def.Visibility#> static PointInPolygonResult TestPointInPolygon(this List<<#=def.Struct#>> polygon, <#=def.Struct#> pt)
        {           
            // We achieve 20% faster processing using a Span compared to List<<#=def.Struct#>>
            // and 25% faster than sticking to IReadOnlyList<<#=def.Struct#>>
            return TestPointInPolygon(CollectionsMarshal.AsSpan(polygon), pt);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        <#=def.Visibility#> static PointInPolygonResult TestPointInPolygon(this ReadOnlyArray<<#=def.Struct#>> polygon, <#=def.Struct#> pt)
        {
            return TestPointInPolygon(polygon.AsSpan(), pt);
        }

        <#=def.Visibility#> static PointInPolygonResult TestPointInPolygon(this IReadOnlyList<<#=def.Struct#>> polygon, <#=def.Struct#> pt)
        {
            if (polygon is List<<#=def.Struct#>> list)
            {
                return TestPointInPolygon(list, pt);
            }
            return TestPointInPolygonImpl(polygon, pt);
        }

        private static PointInPolygonResult TestPointInPolygonImpl(IReadOnlyList<<#=def.Struct#>> polygon, <#=def.Struct#> pt)
        {                
            int len = polygon.Count, start = 0;
            if (len < 3) return PointInPolygonResult.IsOutside;

            while (start < len && polygon[start].Y == pt.Y) start++;
            if (start == len) return PointInPolygonResult.IsOutside;

            double d;
            bool isAbove = polygon[start].Y < pt.Y, startingAbove = isAbove;
            bool val = false;
            int i = start + 1, end = len;
            while (true)
            {
                if (i == end)
                {
                    if (end == 0 || start == 0) break;
                    end = start;
                    i = 0;
                }

                if (isAbove)
                {
                    while (i < end && polygon[i].Y < pt.Y) i++;
                    if (i == end) continue;
                }
                else
                {
                    while (i < end && polygon[i].Y > pt.Y) i++;
                    if (i == end) continue;
                }

                var curr = polygon[i];
                var prev = (i > 0) ? polygon[i - 1] : polygon[len - 1];

                if (curr.Y == pt.Y)
                {
                    if (curr.X == pt.X || (curr.Y == prev.Y &&
                      ((pt.X < prev.X) != (pt.X < curr.X))))
                        return PointInPolygonResult.IsOn;
                    i++;
                    if (i == start) break;
                    continue;
                }

                if (pt.X < curr.X && pt.X < prev.X)
                {
                    // we're only interested in edges crossing on the left
                }
                else if (pt.X > prev.X && pt.X > curr.X)
                {
                    val = !val; // toggle val
                }
                else
                {
                    d = <#=def.Struct#>.CrossProduct(prev, curr, pt);
                    if (d == 0) return PointInPolygonResult.IsOn;
                    if ((d < 0) == isAbove) val = !val;
                }
                isAbove = !isAbove;
                i++;
            }

            if (isAbove != startingAbove)
            {
                if (i == len) i = 0;
                if (i == 0)
                    d = <#=def.Struct#>.CrossProduct(polygon[len - 1], polygon[0], pt);
                else
                    d = <#=def.Struct#>.CrossProduct(polygon[i - 1], polygon[i], pt);
                if (d == 0) return PointInPolygonResult.IsOn;
                if ((d < 0) == isAbove) val = !val;
            }

            if (!val)
                return PointInPolygonResult.IsOutside;
            return PointInPolygonResult.IsInside;
            
        }

        <#=def.Visibility#> static PointInPolygonResult TestPointInPolygon(this ReadOnlySpan<<#=def.Struct#>> polygon, <#=def.Struct#> pt)
        {
            int len = polygon.Length, start = 0;
            if (len < 3) return PointInPolygonResult.IsOutside;

            while (start < len && polygon[start].Y == pt.Y) start++;
            if (start == len) return PointInPolygonResult.IsOutside;

            double d;
            bool isAbove = polygon[start].Y < pt.Y, startingAbove = isAbove;
            bool val = false;
            int i = start + 1, end = len;
            while (true)
            {
                if (i == end)
                {
                    if (end == 0 || start == 0) break;
                    end = start;
                    i = 0;
                }

                if (isAbove)
                {
                    while (i < end && polygon[i].Y < pt.Y) i++;
                    if (i == end) continue;
                }
                else
                {
                    while (i < end && polygon[i].Y > pt.Y) i++;
                    if (i == end) continue;
                }

                var curr = polygon[i];
                var prev = (i > 0) ? polygon[i - 1] : polygon[len - 1];

                if (curr.Y == pt.Y)
                {
                    if (curr.X == pt.X || (curr.Y == prev.Y &&
                      ((pt.X < prev.X) != (pt.X < curr.X))))
                        return PointInPolygonResult.IsOn;
                    i++;
                    if (i == start) break;
                    continue;
                }

                if (pt.X < curr.X && pt.X < prev.X)
                {
                    // we're only interested in edges crossing on the left
                }
                else if (pt.X > prev.X && pt.X > curr.X)
                {
                    val = !val; // toggle val
                }
                else
                {
                    d = <#=def.Struct#>.CrossProduct(prev, curr, pt);
                    if (d == 0) return PointInPolygonResult.IsOn;
                    if ((d < 0) == isAbove) val = !val;
                }
                isAbove = !isAbove;
                i++;
            }

            if (isAbove != startingAbove)
            {
                if (i == len) i = 0;
                if (i == 0)
                    d = <#=def.Struct#>.CrossProduct(polygon[len - 1], polygon[0], pt);
                else
                    d = <#=def.Struct#>.CrossProduct(polygon[i - 1], polygon[i], pt);
                if (d == 0) return PointInPolygonResult.IsOn;
                if ((d < 0) == isAbove) val = !val;
            }

            if (!val)
                return PointInPolygonResult.IsOutside;
            return PointInPolygonResult.IsInside;
        }


<#
	}
#>
	}
}
